{
  "title": "Untitled Project",
  "description": "",
  "head": "<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
  "htmlAttrs": "lang=\"en\" class=\"\"",
  "tags": [],
  "activeEditor": "markup",
  "markup": {
    "language": "html",
    "content": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Interest-Based Perchance Video</title>\r\n  <style>\r\n    body { margin: 0; background: black; color: white; font-family: sans-serif; }\r\n    #generatedFrame { display: block; margin: auto; max-width: 100vw; max-height: 100vh; object-fit: contain; }\r\n    #status { position: fixed; top: 10px; left: 10px; background: rgba(0,0,0,0.6); padding: 8px; border-radius: 8px; z-index: 10; }\r\n  </style>\r\n</head>\r\n<body>\r\n\r\n<div id=\"status\">Initializing camera...</div>\r\n<video id=\"videoFeed\" autoplay muted playsinline style=\"display:none;\"></video>\r\n<img id=\"generatedFrame\" src=\"\" alt=\"Generated frame\"/>\r\n\r\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-core\"></script>\r\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-converter\"></script>\r\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow-models/facemesh\"></script>\r\n\r\n<script>\r\nconst perchanceBase = \"https://perchance.org/ai-text-to-image-generator#interest=\";\r\n\r\nconst video = document.getElementById('videoFeed');\r\nconst imgOutput = document.getElementById('generatedFrame');\r\nconst statusDiv = document.getElementById('status');\r\n\r\nlet model;\r\nlet interestScore = 0;\r\nlet lastFaceSize = null;\r\n\r\nasync function setupCamera() {\r\n  const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n  video.srcObject = stream;\r\n  await new Promise(resolve => video.onloadedmetadata = resolve);\r\n}\r\n\r\nfunction estimateFaceSize(landmarks) {\r\n  const left = landmarks[234];  // left cheek\r\n  const right = landmarks[454]; // right cheek\r\n  const dx = right.x - left.x;\r\n  const dy = right.y - left.y;\r\n  return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\nfunction updateInterest(currentSize) {\r\n  if (lastFaceSize == null) {\r\n    lastFaceSize = currentSize;\r\n    return;\r\n  }\r\n  const delta = currentSize - lastFaceSize;\r\n  lastFaceSize = currentSize;\r\n\r\n  if (delta > 0.001) interestScore++;\r\n  else if (delta < -0.001) interestScore--;\r\n\r\n  interestScore = Math.max(-10, Math.min(10, interestScore));\r\n}\r\n\r\nasync function screenshotPerchancePage(interestLevel) {\r\n  const url = perchanceBase + encodeURIComponent(interestLevel);\r\n\r\n  const iframe = document.createElement(\"iframe\");\r\n  iframe.src = url;\r\n  iframe.width = 800;\r\n  iframe.height = 600;\r\n  iframe.style.display = \"none\";\r\n  document.body.appendChild(iframe);\r\n\r\n  // Wait for image inside Perchance to load\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      try {\r\n        const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\r\n        const img = iframeDoc.querySelector('img');\r\n        if (img) {\r\n          resolve(img.src);\r\n        } else {\r\n          reject(\"No image found in iframe\");\r\n        }\r\n      } catch (e) {\r\n        reject(\"Cross-origin error or failed to fetch image\");\r\n      } finally {\r\n        document.body.removeChild(iframe);\r\n      }\r\n    }, 2000); // Give it time to load and render\r\n  });\r\n}\r\n\r\nasync function mainLoop() {\r\n  const predictions = await model.estimateFaces({ input: video });\r\n  if (predictions.length > 0) {\r\n    const face = predictions[0];\r\n    const size = estimateFaceSize(face.scaledMesh);\r\n    updateInterest(size);\r\n  }\r\n\r\n  statusDiv.innerText = `Interest: ${interestScore}`;\r\n\r\n  try {\r\n    const imgURL = await screenshotPerchancePage(interestScore);\r\n    imgOutput.src = imgURL;\r\n  } catch (err) {\r\n    console.warn(\"Failed to get image from Perchance:\", err);\r\n  }\r\n\r\n  setTimeout(mainLoop, 1000); // Next frame in 1s\r\n}\r\n\r\nasync function init() {\r\n  await setupCamera();\r\n  model = await facemesh.load();\r\n  mainLoop();\r\n}\r\n\r\ninit();\r\n</script>\r\n</body>\r\n</html>\r\n"
  },
  "style": {
    "language": "css",
    "content": ""
  },
  "script": {
    "language": "javascript",
    "content": ""
  },
  "stylesheets": [],
  "scripts": [],
  "cssPreset": "",
  "processors": [],
  "customSettings": {},
  "imports": {},
  "types": {},
  "tests": {
    "language": "typescript",
    "content": ""
  },
  "version": "46"
}